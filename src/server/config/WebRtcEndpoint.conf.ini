;; External IP addresses
;;
;; If you know what will be the external or public IP address of the media
;; server (e.g. because your deployment has an static IP), you can specify it
;; here. Doing so has several advantages:
;;
;; 1. The WebRTC ICE gathering process will be much quicker. Normally, it needs
;;    to gather local IP addresses, but this step can be skipped if you provide
;;    them beforehand.
;;
;; 2. It will ensure that the media server always decides to use the correct
;;    network interface. With WebRTC ICE gathering it's possible that, under
;;    some circumstances (in systems with virtual network interfaces such as
;;    "docker0") the ICE process ends up choosing the wrong local IP.
;;
;; 3. You will not need to configure STUN/TURN for the media server (see
;;    settings below). STUN/TURN are needed only when the media server needs
;;    to find out what is its own external IP. If you set it up here, then there
;;    is no need for the STUN/TURN auto-discovery.
;;
;; <IpAddressList> is a comma-separated list of IP addresses.
;;
;; Examples:
;; externalAddresses=1.1.1.1
;; externalAddresses=1.1.1.1,2.2.2.2,3.3.3.3
;;
;externalAddresses=<IpAddressList>

;; STUN server
;;
;; The ICE process uses STUN servers to punch holes through NAT firewalls.
;;
;; <IpAddress> MUST be an IP Address; domain names are NOT supported.
;;
;; You need to use a well-working STUN server. Use this to check if it works:
;;
;;     https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/
;;
;; You should get at least one Server-Reflexive Candidate (type "srflx").
;;
;stunServerAddress=<IpAddress>
;stunServerPort=<Port>

;; TURN server
;;
;; When STUN is not enough to open connections through some NAT firewalls,
;; using TURN is the remaining alternative.
;;
;; Note that TURN is a superset of STUN, so you don't strictly need to
;; configure STUN if you are going to use TURN.
;;
;; <IpAddress> MUST be an IP Address; domain names are NOT supported.
;; <Transport> is OPTIONAL. Possible values: udp, tcp, tls. Default: udp.
;;
;; You need to use a well-working TURN server. Use this to check if it works:
;;
;;     https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/
;;
;; You should get at least one Server-Reflexive Candidate (type "srflx") AND
;; one Relay Candidate (type "relay").
;;
;turnURL=<User>:<Pass>@<IpAddress>:<Port>[?transport=<Transport>]

;pemCertificate is deprecated. Please use pemCertificateRSA instead
;pemCertificate=<path>
;pemCertificateRSA=<path>
;pemCertificateECDSA=<path>
